import sys
import numpy as np
from dataclasses import dataclass

@dataclass
class ISAData:
    rho: float
    a: float
    T: float
    p: float
    nu: float

def ISAdataFunction(inputHeight):

    #Warn for limitations
    if inputHeight < 0:
        sys.exit('ISAData: Error in input height, it is below 0!')
    elif inputHeight > 20e3:
        sys.exit('ISAData: Error in input height, it is above 20km!')

    #Setup data
    #The data in the matrix below is taken from the following source:
    # Advanced Aircraft Design: Conceptual Design, Analysis and Optimization of Subsonic Civil Airplanes, First Edition. Egbert Torenbeek.
    # Â© 2013 by Egbert Torenbeek. Published 2013 by John Wiley & Sons, Ltd.

    inputMatrix = np.array([[0, 288.15, 1, 340.29, 101325, 1, 1.2250, 1, 1], \
                            [500, 284.90, 0.9887, 338.37, 95461, 0.9421, 1.1673, 0.9529, 0.9912], \
                            [1000, 281.65, 0.9774, 336.43, 89874, 0.8870, 1.1117, 0.9075, 0.9823], \
                            [1500, 278.40, 0.9662, 334.49, 84556, 0.8345, 1.0581, 0.8638, 0.9735], \
                            [2000, 275.15, 0.9549, 332.53, 79495, 0.7846, 1.0065, 0.8216, 0.9645], \
                            [2500, 271.90, 0.9436, 330.56, 74682, 0.7371, 0.9569, 0.7811, 0.9556], \
                            [3000, 268.65, 0.9306, 328.58, 70108, 0.6919, 0.9091, 0.7421, 0.9465], \
                            [3500, 265.40, 0.9210, 326.58, 65764, 0.6490, 0.8632, 0.7055, 0.9375], \
                            [4000, 262.15, 0.9098, 324.58, 61640, 0.6083, 0.8191, 0.6686, 0.9283], \
                            [4500, 258.90, 0.8985, 322.56, 57728, 0.5697, 0.7768, 0.6341, 0.9191], \
                            [5000, 255.65, 0.8872, 320.53, 54020, 0.5331, 0.7361, 0.6009, 0.9099], \
                            [5500, 252.40, 0.8759, 318.48, 50506, 0.4985, 0.6971, 0.5691, 0.9006], \
                            [6000, 249.15, 0.8647, 316.43, 47181, 0.4656, 0.6597, 0.5385, 0.8911], \
                            [6500, 245.90, 0.8534, 314.36, 44034, 0.4346, 0.6238, 0.5092, 0.8818], \
                            [7000, 242.65, 0.8421, 312.27, 41060, 0.4052, 0.5895, 0.4812, 0.8724], \
                            [7500, 239.40, 0.8308, 310.17, 38251, 0.3775, 0.5566, 0.4544, 0.8628], \
                            [8000, 236.15, 0.8195, 308.06, 35599, 0.3513, 0.5252, 0.4287, 0.8532], \
                            [8500, 232.90, 0.8083, 305.93, 33099, 0.3267, 0.4951, 0.4042, 0.8436], \
                            [9000, 229.65, 0.7970, 303.79, 30742, 0.3040, 0.4663, 0.3807, 0.8339], \
                            [9500, 226.40, 0.7857, 301.63, 28523, 0.2815, 0.4389, 0.3583, 0.8241], \
                            [10000, 223.15, 0.7744, 299.46, 26436, 0.2609, 0.4127, 0.3369, 0.8143], \
                            [10500, 219.90, 0.7631, 297.27, 24474, 0.2415, 0.3877, 0.3165, 0.8044], \
                            [11000, 216.65, 0.7519, 295.07, 22632, 0.2234, 0.3639, 0.2971, 0.7944], \
                            [12000, 216.65, 0.7519, 295.07, 19330, 0.1908, 0.3108, 0.2537, 0.7944], \
                            [13000, 216.65, 0.7519, 295.07, 16510, 0.1629, 0.2655, 0.2167, 0.7944], \
                            [14000, 216.65, 0.7519, 295.07, 14101, 0.1392, 0.2268, 0.1851, 0.7944], \
                            [15000, 216.65, 0.7519, 295.07, 12044, 0.1189, 0.1937, 0.1581, 0.7944], \
                            [16000, 216.65, 0.7519, 295.07, 10287, 0.1015, 0.1654, 0.1350, 0.7944], \
                            [17000, 216.65, 0.7519, 295.07, 8786, 0.0867, 0.1413, 0.1153, 0.7944], \
                            [18000, 216.65, 0.7519, 295.07, 7505, 0.0741, 0.1207, 0.0985, 0.7944], \
                            [19000, 216.65, 0.7519, 295.07, 6410, 0.0633, 0.1031, 0.0842, 0.7944], \
                            [20000, 216.65, 0.7519, 295.07, 5475, 0.0540, 0.0880, 0.0718, 0.7944]])

    H = inputMatrix[:,0]
    T = inputMatrix[:,1]
    a = inputMatrix[:,3]
    p = inputMatrix[:,4]
    rho = inputMatrix[:,6]
    mu = 1.7894e-5*inputMatrix[:,8]

    # Interpolate
    T_ISA = np.interp(inputHeight,H,T)
    a_ISA = np.interp(inputHeight,H,a)
    p_ISA = np.interp(inputHeight,H,p)
    rho_ISA = np.interp(inputHeight,H,rho)
    nu_ISA = 1/rho_ISA*np.interp(inputHeight,H,mu)

    #Save in object
    ISADataObj = ISAData(rho_ISA, a_ISA, T_ISA, p_ISA, nu_ISA)

    return ISADataObj
